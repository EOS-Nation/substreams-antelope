syntax = "proto3";

package antelope.eosio.token.v1;

import "google/protobuf/timestamp.proto";

/**
 * Allows `issuer` account to create a token in supply of `maximum_supply`. If validation is successful a new entry in statstable for token symbol scope gets created.
 *
 * @param issuer - the account that creates the token,
 * @param maximum_supply - the maximum supply set for the token created.
 *
 * @pre Token symbol has to be valid,
 * @pre Token symbol must not be already created,
 * @pre maximum_supply has to be smaller than the maximum supply allowed by the system: 1^62 - 1.
 * @pre Maximum supply must be positive;
 */
message Create {
  string code = 1;
  string issuer = 2;
  string maximum_supply = 3;
}

/**
 *  This action issues to `to` account a `quantity` of tokens.
 *
 * @param to - the account to issue tokens to, it must be the same as the issuer,
 * @param quantity - the amount of tokens to be issued,
 * @memo - the memo string that accompanies the token issue transaction.
 */
message Issue {
  string code = 1;
  string to = 2;
  string quantity = 3;
  string memo = 4;
}
 
/**
 * The opposite for create action, if all validations succeed,
 * it debits the statstable.supply amount.
 *
 * @param quantity - the quantity of tokens to retire,
 * @param memo - the memo string to accompany the transaction.
 */
message Retire {
  string code = 1;
  string quantity = 2;
  string memo = 3;
}
 
/**
 * Allows `from` account to transfer to `to` account the `quantity` tokens.
 * One account is debited and the other is credited with quantity tokens.
 *
 * @param from - the account to transfer from,
 * @param to - the account to be transferred to,
 * @param quantity - the quantity of tokens to be transferred,
 * @param memo - the memo string to accompany the transaction.
 */
message Transfer {
  string code = 1;
  string from = 2;
  string to = 3;
  string quantity = 4;
  string memo = 5;
}

/**
 * Allows `ram_payer` to create an account `owner` with zero balance for
 * token `symbol` at the expense of `ram_payer`.
 *
 * @param owner - the account to be created,
 * @param symbol - the token to be payed with by `ram_payer`,
 * @param ram_payer - the account that supports the cost of this action.
 */
message Open {
  string code = 1;
  string owner = 2;
  string symbol = 3;
  string ram_payer = 4;
}

/**
 * This action is the opposite for open, it closes the account `owner`
 * for token `symbol`.
 *
 * @param owner - the owner account to execute the close action for,
 * @param symbol - the symbol of the token to execute the close action for.
 *
 * @pre The pair of owner plus symbol has to exist otherwise no action is executed,
 * @pre If the pair of owner plus symbol exists, the balance has to be zero.
 */
message Close {
  string code = 1;
  string symbol = 2;
}

message Account {
  string code = 1;
  string scope = 2;
  string balance = 3;
}

message CurrencyStats {
  string code = 1;
  string scope = 2;
  string supply = 3;
  string max_supply = 4;
  string issuer = 5;
}
